// <auto-generated />
using System;
using ManageMe.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageMe.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240626220145_Fixed StudyPlan PK")]
    partial class FixedStudyPlanPK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChannelRoles", b =>
                {
                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChannelId", "RoleId");

                    b.HasIndex(new[] { "ChannelId" }, "IX_ChannelRoles_ChannelId");

                    b.HasIndex(new[] { "RoleId" }, "IX_ChannelRoles_RoleId");

                    b.ToTable("ChannelRoles", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Activity__3214EC07383AA6F9");

                    b.HasIndex(new[] { "Name" }, "UQ__Activity__737584F6143B801E")
                        .IsUnique();

                    b.ToTable("Activity", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EnrollmentYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534956297FA")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "GroupId" }, "index_User_Group");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ChannelPic")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JoinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Channel__3214EC07E13C7935");

                    b.HasIndex(new[] { "SubjectId" }, "index_Channel_Subject");

                    b.ToTable("Channel", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.ChannelRequest", b =>
                {
                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("RequesterId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelRequests");
                });

            modelBuilder.Entity("ManageMe.Entities.ChannelUser", b =>
                {
                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("bit");

                    b.HasKey("ChannelId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChannelUsers");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsForOlympiadParticipants")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudyDomainId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StudyDomainId" }, "IX_Batch_StudyDomain");

                    b.ToTable("Batch", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Building", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MethodologyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MethodologyId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParagraphId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParagraphId");

                    b.HasIndex("ParentDetailId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.FinalGrade", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex(new[] { "StudentId" }, "IX_FinalGrade_Student");

                    b.HasIndex(new[] { "SubjectId" }, "IX_FinalGrade_Subject");

                    b.ToTable("FinalGrade", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.GradingCriterion", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GradingActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("MattersForPassingTheSubject")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumPointsRequired")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal?>("Points")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("SubjectId", "GroupId", "GradingActivityId")
                        .HasName("PK_GradingCriterion");

                    b.HasIndex(new[] { "GradingActivityId" }, "index_GradingCriterion_GradingActivity");

                    b.HasIndex(new[] { "GroupId" }, "index_GradingCriterion_Group");

                    b.HasIndex(new[] { "SubjectId" }, "index_GradingCriterion_Subject");

                    b.ToTable("GradingCriterion", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.GradingCriterionSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BonusPoints")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool>("BonusPointsMattersForPassingSubject")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumPointsRequired")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("SubjectId", "GroupId")
                        .HasName("PK_GradingCriterionSubject");

                    b.HasIndex(new[] { "GroupId" }, "index_GradingCriterionSubject_Group");

                    b.HasIndex(new[] { "SubjectId" }, "index_GradingCriterionSubject_Subject");

                    b.ToTable("GradingCriterionSubject", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("HasComputers")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BuildingId" }, "IX_Hall_Building");

                    b.ToTable("Hall", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Methodology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK__Methodol__3214EC07D38F9247");

                    b.HasIndex(new[] { "Name" }, "UQ__Methodol__737584F68D2AB986")
                        .IsUnique();

                    b.ToTable("Methodology", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Paragraph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Paragraphs");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Provision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentProvisionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ParentProvisionId");

                    b.ToTable("Provisions");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Schedule", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("DistributionId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "TeacherId", "ActivityId", "GroupId", "HallId", "ActivityFrequencyId", "DistributionId");

                    b.HasIndex(new[] { "ActivityId" }, "IX_Schedule_Activity");

                    b.HasIndex(new[] { "GroupId" }, "IX_Schedule_Group");

                    b.HasIndex(new[] { "HallId" }, "IX_Schedule_Hall");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Schedule_Subject");

                    b.HasIndex(new[] { "TeacherId" }, "IX_Schedule_Teacher");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentSectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ParentSectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.SubjectActivityFrequency", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudyDomainId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectActivityFrequencyId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId", "StudyDomainId", "ActivityId")
                        .HasName("PK_SubjectActivityFrequency");

                    b.HasIndex("StudyDomainId", "SubjectId");

                    b.HasIndex(new[] { "ActivityId" }, "index_SubjectActivityFrequency_Activity");

                    b.HasIndex(new[] { "StudyDomainId" }, "index_SubjectActivityFrequency_StudyDomain");

                    b.HasIndex(new[] { "SubjectId" }, "index_SubjectActivityFrequency_Subject");

                    b.ToTable("SubjectActivityFrequency", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.TeacherPermission", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "SubjectId", "ActivityId");

                    b.HasIndex(new[] { "ActivityId" }, "index_TeacherPermission_Activity");

                    b.HasIndex(new[] { "SubjectId" }, "index_TeacherPermission_Subject");

                    b.HasIndex(new[] { "TeacherId" }, "index_TeacherPermission_Teacher");

                    b.ToTable("TeacherPermission", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.VwScheduleColor", b =>
                {
                    b.Property<int>("ActivityFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("DistributionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("VwScheduleColor", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.VwStudentGradeForSubject", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradingActivityId")
                        .HasColumnType("int");

                    b.Property<bool>("GradingActivityPassed")
                        .HasColumnType("bit");

                    b.Property<decimal>("GradingActivityTotalPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalPointsRounded")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("VwStudentGradeForSubject", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.VwTeacherGroupSubjectActivities", b =>
                {
                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("VwTeacherGroupSubjectActivities", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Grade", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("GradingActivityId")
                        .HasColumnType("int");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(4, 2)");

                    b.HasKey("StudentId", "SubjectId", "GradingActivityId", "WeekNumber");

                    b.HasIndex(new[] { "GradingActivityId" }, "index_Grade_GradingActivity");

                    b.HasIndex(new[] { "StudentId" }, "index_Grade_Student");

                    b.HasIndex(new[] { "SubjectId" }, "index_Grade_Subject");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.GradingActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK_GradingActivity");

                    b.HasIndex(new[] { "Name" }, "UQ_GradingActivity")
                        .IsUnique();

                    b.HasIndex(new[] { "ActivityId" }, "index_GradingActivity_Activity");

                    b.ToTable("GradingActivity", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Group__3214EC07AA267893");

                    b.HasIndex(new[] { "Number" }, "UQ__Group__78A1A19D3536E801")
                        .IsUnique();

                    b.HasIndex(new[] { "BatchId" }, "index_Group_Batch");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAnnouncement")
                        .HasColumnType("bit");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Message__3214EC07E325146B");

                    b.HasIndex("ChannelId");

                    b.HasIndex(new[] { "AuthorId" }, "index_Message_Author");

                    b.HasIndex(new[] { "MessageTypeId" }, "index_Message_MessageType");

                    b.HasIndex(new[] { "ParentMessageId" }, "index_Message_ParentMessage");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.StudyDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudyYears")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__StudyDom__3214EC07F9B105B0");

                    b.HasIndex(new[] { "Name" }, "UQ__StudyDom__737584F6CE28CABC")
                        .IsUnique();

                    b.ToTable("StudyDomain", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.StudyPlan", b =>
                {
                    b.Property<int>("StudyDomainId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("CourseCredits")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationForm")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("LaboratoryCredits")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCredits")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.Property<int>("SeminaryCredits")
                        .HasColumnType("int");

                    b.Property<int>("SubjectOptionality")
                        .HasColumnType("int");

                    b.Property<int>("SubjectType")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.HasKey("StudyDomainId", "SubjectId");

                    b.HasIndex(new[] { "StudyDomainId" }, "index_StudyPlan_StudyDomain");

                    b.HasIndex(new[] { "SubjectId" }, "index_StudyPlan_Subject");

                    b.ToTable("StudyPlan", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Subject__3214EC07E8D1AEAB");

                    b.HasIndex(new[] { "Name" }, "UQ__Subject__737584F63299DB1E")
                        .IsUnique();

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeacherPermissionGroup", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "ActivityId", "SubjectId", "GroupId");

                    b.HasIndex("TeacherId", "SubjectId", "ActivityId");

                    b.HasIndex(new[] { "ActivityId" }, "IX_TeacherPermissionGroup_ActivityId");

                    b.HasIndex(new[] { "GroupId" }, "IX_TeacherPermissionGroup_GroupId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_TeacherPermissionGroup_SubjectId");

                    b.HasIndex(new[] { "TeacherId" }, "IX_TeacherPermissionGroup_TeacherId");

                    b.ToTable("TeacherPermissionGroup", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "index_UserRole_Role");

                    b.HasIndex(new[] { "UserId" }, "index_UserRole_User");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("ManageMe.Entities.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__737584F66C18D99F")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ChannelRoles", b =>
                {
                    b.HasOne("ManageMe.Entities.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_ChannelRoles_Channel_ChannelId");

                    b.HasOne("ManageMe.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ChannelRoles_Role_RoleId");
                });

            modelBuilder.Entity("ManageMe.Entities.ApplicationUser", b =>
                {
                    b.HasOne("ManageMe.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__User__GroupId__02925FBF");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ManageMe.Entities.Channel", b =>
                {
                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("Channels")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Channel__Subject__361203C5");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManageMe.Entities.ChannelRequest", b =>
                {
                    b.HasOne("ManageMe.Entities.Channel", "Channel")
                        .WithMany("ChannelRequests")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageMe.Entities.ApplicationUser", "Requester")
                        .WithMany("ChannelRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("ManageMe.Entities.ChannelUser", b =>
                {
                    b.HasOne("ManageMe.Entities.Channel", "Channel")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageMe.Entities.ApplicationUser", "User")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Article", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Chapter", "Chapter")
                        .WithMany("Articles")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Batch", b =>
                {
                    b.HasOne("ManageMe.Entities.StudyDomain", "StudyDomain")
                        .WithMany("Batches")
                        .HasForeignKey("StudyDomainId")
                        .IsRequired()
                        .HasConstraintName("FK_Batch_StudyDomain");

                    b.Navigation("StudyDomain");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Chapter", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Methodology", "Methodology")
                        .WithMany("Chapters")
                        .HasForeignKey("MethodologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Methodology");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Detail", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Paragraph", "Paragraph")
                        .WithMany("Details")
                        .HasForeignKey("ParagraphId");

                    b.HasOne("ManageMe.Entities.Entities.Detail", "ParentDetail")
                        .WithMany("ChildrenDetails")
                        .HasForeignKey("ParentDetailId");

                    b.Navigation("Paragraph");

                    b.Navigation("ParentDetail");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.FinalGrade", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationUser", "Student")
                        .WithMany("FinalGrades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_FinalGrade_Student");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("FinalGrades")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_FinalGrade_Subject");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.GradingCriterion", b =>
                {
                    b.HasOne("ManageMe.Entities.GradingActivity", "GradingActivity")
                        .WithMany("GradingCriteria")
                        .HasForeignKey("GradingActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingCriterion_GradingActivity");

                    b.HasOne("ManageMe.Entities.Group", "Group")
                        .WithMany("GradingCriteria")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingCriterion_Group");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("GradingCriteria")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingCriterion_Subject");

                    b.Navigation("GradingActivity");

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.GradingCriterionSubject", b =>
                {
                    b.HasOne("ManageMe.Entities.Group", "Group")
                        .WithMany("GradingCriterionSubjects")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingCriterionSubject_Group");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("GradingCriterionSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingCriterionSubject_Subject");

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Hall", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Building", "Building")
                        .WithMany("Halls")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("FK_Hall_Building");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Paragraph", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Section", "Section")
                        .WithMany("Paragraphs")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Provision", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Article", "Article")
                        .WithMany("Provisions")
                        .HasForeignKey("ArticleId");

                    b.HasOne("ManageMe.Entities.Entities.Provision", "ParentProvision")
                        .WithMany("ChildrenProvisions")
                        .HasForeignKey("ParentProvisionId");

                    b.Navigation("Article");

                    b.Navigation("ParentProvision");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Schedule", b =>
                {
                    b.HasOne("ManageMe.Entities.Activity", "Activity")
                        .WithMany("Schedules")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Activity");

                    b.HasOne("ManageMe.Entities.Group", "Group")
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Group");

                    b.HasOne("ManageMe.Entities.Entities.Hall", "Hall")
                        .WithMany("Schedules")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Hall");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Subject");

                    b.HasOne("ManageMe.Entities.ApplicationUser", "Teacher")
                        .WithMany("Schedules")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Teacher");

                    b.Navigation("Activity");

                    b.Navigation("Group");

                    b.Navigation("Hall");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Section", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Chapter", "Chapter")
                        .WithMany("Sections")
                        .HasForeignKey("ChapterId");

                    b.HasOne("ManageMe.Entities.Entities.Section", "ParentSection")
                        .WithMany("ChildrenSections")
                        .HasForeignKey("ParentSectionId");

                    b.Navigation("Chapter");

                    b.Navigation("ParentSection");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.SubjectActivityFrequency", b =>
                {
                    b.HasOne("ManageMe.Entities.Activity", "Activity")
                        .WithMany("SubjectActivityFrequencies")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectActivityFrequency_Activity");

                    b.HasOne("ManageMe.Entities.StudyPlan", "StudyPlan")
                        .WithMany("SubjectActivityFrequencies")
                        .HasForeignKey("StudyDomainId", "SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectActivityFrequency_StudyPlan");

                    b.Navigation("Activity");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.TeacherPermission", b =>
                {
                    b.HasOne("ManageMe.Entities.Activity", "Activity")
                        .WithMany("TeacherPermissions")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPermission_Activity");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("TeacherPermissions")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPermission_Subject");

                    b.HasOne("ManageMe.Entities.ApplicationUser", "Teacher")
                        .WithMany("TeacherPermissions")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPermission_Teacher");

                    b.Navigation("Activity");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ManageMe.Entities.Grade", b =>
                {
                    b.HasOne("ManageMe.Entities.GradingActivity", "GradingActivity")
                        .WithMany("Grades")
                        .HasForeignKey("GradingActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_GradingActivity");

                    b.HasOne("ManageMe.Entities.ApplicationUser", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Student");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Subject");

                    b.Navigation("GradingActivity");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ManageMe.Entities.GradingActivity", b =>
                {
                    b.HasOne("ManageMe.Entities.Activity", "Activity")
                        .WithMany("GradingActivities")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_GradingActivity_Activity");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("ManageMe.Entities.Group", b =>
                {
                    b.HasOne("ManageMe.Entities.Entities.Batch", "Batch")
                        .WithMany("Groups")
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("FK__Group__Batch__7BE56230");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("ManageMe.Entities.Message", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationUser", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__Message__AuthorI__3EA749C6");

                    b.HasOne("ManageMe.Entities.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId");

                    b.HasOne("ManageMe.Entities.Message", "ParentMessage")
                        .WithMany("ChildrenMessages")
                        .HasForeignKey("ParentMessageId")
                        .HasConstraintName("FK__Message__ParentM__3CBF0154");

                    b.Navigation("Author");

                    b.Navigation("Channel");

                    b.Navigation("ParentMessage");
                });

            modelBuilder.Entity("ManageMe.Entities.StudyPlan", b =>
                {
                    b.HasOne("ManageMe.Entities.StudyDomain", "StudyDomain")
                        .WithMany("StudyPlans")
                        .HasForeignKey("StudyDomainId")
                        .IsRequired()
                        .HasConstraintName("FK_StudyPlan_StudyDomain");

                    b.HasOne("ManageMe.Entities.Subject", "Subject")
                        .WithMany("StudyPlans")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_StudyPlan_Subject");

                    b.Navigation("StudyDomain");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManageMe.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeacherPermissionGroup", b =>
                {
                    b.HasOne("ManageMe.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPermissionGroup_Group");

                    b.HasOne("ManageMe.Entities.Entities.TeacherPermission", null)
                        .WithMany()
                        .HasForeignKey("TeacherId", "SubjectId", "ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPermissionGroup_TeacherPermission");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("ManageMe.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("ManageMe.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");
                });

            modelBuilder.Entity("ManageMe.Entities.ApplicationRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithOne()
                        .HasForeignKey("ManageMe.Entities.ApplicationRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManageMe.Entities.Activity", b =>
                {
                    b.Navigation("GradingActivities");

                    b.Navigation("Schedules");

                    b.Navigation("SubjectActivityFrequencies");

                    b.Navigation("TeacherPermissions");
                });

            modelBuilder.Entity("ManageMe.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ChannelRequests");

                    b.Navigation("ChannelUsers");

                    b.Navigation("FinalGrades");

                    b.Navigation("Grades");

                    b.Navigation("Messages");

                    b.Navigation("Schedules");

                    b.Navigation("TeacherPermissions");
                });

            modelBuilder.Entity("ManageMe.Entities.Channel", b =>
                {
                    b.Navigation("ChannelRequests");

                    b.Navigation("ChannelUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Article", b =>
                {
                    b.Navigation("Provisions");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Batch", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Building", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Chapter", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Detail", b =>
                {
                    b.Navigation("ChildrenDetails");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Hall", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Methodology", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Paragraph", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Provision", b =>
                {
                    b.Navigation("ChildrenProvisions");
                });

            modelBuilder.Entity("ManageMe.Entities.Entities.Section", b =>
                {
                    b.Navigation("ChildrenSections");

                    b.Navigation("Paragraphs");
                });

            modelBuilder.Entity("ManageMe.Entities.GradingActivity", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("GradingCriteria");
                });

            modelBuilder.Entity("ManageMe.Entities.Group", b =>
                {
                    b.Navigation("GradingCriteria");

                    b.Navigation("GradingCriterionSubjects");

                    b.Navigation("Schedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ManageMe.Entities.Message", b =>
                {
                    b.Navigation("ChildrenMessages");
                });

            modelBuilder.Entity("ManageMe.Entities.StudyDomain", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("ManageMe.Entities.StudyPlan", b =>
                {
                    b.Navigation("SubjectActivityFrequencies");
                });

            modelBuilder.Entity("ManageMe.Entities.Subject", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("FinalGrades");

                    b.Navigation("Grades");

                    b.Navigation("GradingCriteria");

                    b.Navigation("GradingCriterionSubjects");

                    b.Navigation("Schedules");

                    b.Navigation("StudyPlans");

                    b.Navigation("TeacherPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
